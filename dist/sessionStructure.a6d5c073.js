function e(e){return e&&e.__esModule?e.default:e}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},i={},s={},n=t.parcelRequire09c7;null==n&&((n=function(e){if(e in i)return i[e].exports;if(e in s){var t=s[e];delete s[e];var n={id:e,exports:{}};return i[e]=n,t.call(n.exports,n,n.exports),n.exports}var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}).register=function(e,t){s[e]=t},t.parcelRequire09c7=n);var r=n("4xklQ"),a=n("cas9V"),h=n("1XEes"),o=n("6pmrQ"),l=n("e3wul"),d=n("7955l");new class{constructor(){this.element=document.querySelector(".content"),this.elements={line:this.element.querySelector(".layout__line")},this.viewport={width:window.innerWidth,height:window.innerHeight},this.mouse={x:0,y:0},this.scroll={height:0,limit:0,hard:0,soft:0,ease:.05,normalized:0,running:!1},this.settings={uFrequency:{start:0,end:5},uAmplitude:{start:4,end:4},uDensity:{start:10,end:1},uStrength:{start:0,end:1.1},uDeepPurple:{start:1,end:0},uOpacity:{start:.1,end:.66}},this.scene=new r.Scene,this.renderer=new r.WebGLRenderer({antialias:!0,alpha:!0}),this.canvas=this.renderer.domElement,this.camera=new r.PerspectiveCamera(45,this.viewport.width/this.viewport.height,.1,10),this.clock=new r.Clock,this.smoothScroll=new o.default({element:this.element,viewport:this.viewport,scroll:this.scroll}),a.default.defaults({ease:"power2",duration:6.6,overwrite:!0}),this.updateScrollAnimations=this.updateScrollAnimations.bind(this),this.update=this.update.bind(this),this.init()}init(){this.addCanvas(),this.addCamera(),this.addMesh(),this.addEventListeners(),this.onResize(),this.update()}addCanvas(){this.canvas.classList.add("webgl"),document.body.appendChild(this.canvas)}addCamera(){this.camera.position.set(0,0,2.5),this.scene.add(this.camera)}addMesh(){this.geometry=new r.ConeBufferGeometry(1,1,24,1,!0,0),this.material=new r.ShaderMaterial({wireframe:!0,blending:r.AdditiveBlending,transparent:!0,vertexShader:e(l),fragmentShader:e(d),uniforms:{uFrequency:{value:this.settings.uFrequency.start},uAmplitude:{value:this.settings.uAmplitude.start},uDensity:{value:this.settings.uDensity.start},uStrength:{value:this.settings.uStrength.start},uDeepPurple:{value:this.settings.uDeepPurple.start},uOpacity:{value:this.settings.uOpacity.start}}}),this.mesh=new r.Mesh(this.geometry,this.material),this.scene.add(this.mesh)}updateScrollAnimations(){this.scroll.running=!1,this.scroll.normalized=(this.scroll.hard/this.scroll.limit).toFixed(1),a.default.to(this.mesh.rotation,{x:this.scroll.normalized*Math.PI}),a.default.to(this.elements.line,{scaleX:this.scroll.normalized,transformOrigin:"left",duration:1.5,ease:"ease"});for(const e in this.settings)this.settings[e].start!==this.settings[e].end&&a.default.to(this.mesh.material.uniforms[e],{value:this.settings[e].start+this.scroll.normalized*(this.settings[e].end-this.settings[e].start)})}addEventListeners(){window.addEventListener("load",this.onLoad.bind(this)),window.addEventListener("scroll",this.onScroll.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}onLoad(){document.body.classList.remove("loading"),this.animations=new h.default(this.element,this.camera)}onMouseMove(e){this.mouse.x=2*(e.clientX/this.viewport.width).toFixed(2),this.mouse.y=2*(e.clientY/this.viewport.height).toFixed(2),a.default.to(this.mesh.material.uniforms.uFrequency,{value:this.mouse.x}),a.default.to(this.mesh.material.uniforms.uAmplitude,{value:this.mouse.x}),a.default.to(this.mesh.material.uniforms.uDensity,{value:this.mouse.y}),a.default.to(this.mesh.material.uniforms.uStrength,{value:this.mouse.y}),console.info(`X: ${this.mouse.x}  |  Y: ${this.mouse.y}`)}onScroll(){this.scroll.running||(window.requestAnimationFrame(this.updateScrollAnimations),this.scroll.running=!0)}onResize(){this.viewport={width:window.innerWidth,height:window.innerHeight},this.smoothScroll.onResize(),this.viewport.width<this.viewport.height?this.mesh.scale.set(.75,.75,.75):this.mesh.scale.set(1,1,1),this.camera.aspect=this.viewport.width/this.viewport.height,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.viewport.width,this.viewport.height),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,1.5))}update(){const e=this.clock.getElapsedTime();this.mesh.rotation.y=.05*e,this.smoothScroll.update(),this.render(),window.requestAnimationFrame(this.update)}render(){this.renderer.render(this.scene,this.camera)}},console.log("background: white; color: black; padding: 1ch 2ch; border-radius: 2rem;");